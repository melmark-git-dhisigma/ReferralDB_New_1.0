//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MelmarkDBEntities : DbContext
    {
        public MelmarkDBEntities()
            : base("name=MelmarkDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AcdSheetMtng> AcdSheetMtngs { get; set; }
        public DbSet<AdaptiveEquipment> AdaptiveEquipments { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<AddressList> AddressLists { get; set; }
        public DbSet<AsmntGoalRel> AsmntGoalRels { get; set; }
        public DbSet<AsmntLPRel> AsmntLPRels { get; set; }
        public DbSet<AsmntTempStg> AsmntTempStgs { get; set; }
        public DbSet<AsmntYear> AsmntYears { get; set; }
        public DbSet<Assessment> Assessments { get; set; }
        public DbSet<BasicBehavioralInformation> BasicBehavioralInformations { get; set; }
        public DbSet<BehaveLookup> BehaveLookups { get; set; }
        public DbSet<BehaviorCategory> BehaviorCategories { get; set; }
        public DbSet<BehaviorReminder> BehaviorReminders { get; set; }
        public DbSet<Behaviour> Behaviours { get; set; }
        public DbSet<BehaviourCalc> BehaviourCalcs { get; set; }
        public DbSet<BehaviourDetail> BehaviourDetails { get; set; }
        public DbSet<BehaviourLPRel> BehaviourLPRels { get; set; }
        public DbSet<BehavioursPA> BehavioursPAs { get; set; }
        public DbSet<binaryFile> binaryFiles { get; set; }
        public DbSet<BiweeklyStatu> BiweeklyStatus { get; set; }
        public DbSet<BSPDoc> BSPDocs { get; set; }
        public DbSet<Class> Classes { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<clvAsmtTool> clvAsmtTools { get; set; }
        public DbSet<clvRecChange> clvRecChanges { get; set; }
        public DbSet<clvReinfoSur> clvReinfoSurs { get; set; }
        public DbSet<Color> Colors { get; set; }
        public DbSet<ContactPersonal> ContactPersonals { get; set; }
        public DbSet<CrntRecomendation> CrntRecomendations { get; set; }
        public DbSet<DiaganosesPA> DiaganosesPAs { get; set; }
        public DbSet<DimDateHour> DimDateHours { get; set; }
        public DbSet<District> Districts { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<DSTempHdr> DSTempHdrs { get; set; }
        public DbSet<DSTempParentStep> DSTempParentSteps { get; set; }
        public DbSet<DSTempPrompt> DSTempPrompts { get; set; }
        public DbSet<DSTempRule> DSTempRules { get; set; }
        public DbSet<DSTempSet> DSTempSets { get; set; }
        public DbSet<DSTempSetCol> DSTempSetCols { get; set; }
        public DbSet<DSTempSetColCalc> DSTempSetColCalcs { get; set; }
        public DbSet<DSTempSetStatu> DSTempSetStatus { get; set; }
        public DbSet<DSTempStep> DSTempSteps { get; set; }
        public DbSet<EmergencyContactSchool> EmergencyContactSchools { get; set; }
        public DbSet<EventLog> EventLogs { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<Goal> Goals { get; set; }
        public DbSet<GoalLevel> GoalLevels { get; set; }
        public DbSet<GoalLPRel> GoalLPRels { get; set; }
        public DbSet<GoalRel> GoalRels { get; set; }
        public DbSet<GoalRelType> GoalRelTypes { get; set; }
        public DbSet<GoalType> GoalTypes { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<IEP_PE_Details> IEP_PE_Details { get; set; }
        public DbSet<IEP_PE10_Benchmark> IEP_PE10_Benchmark { get; set; }
        public DbSet<IEP_PE11_SchoolPer> IEP_PE11_SchoolPer { get; set; }
        public DbSet<IEP_PE11_SDI> IEP_PE11_SDI { get; set; }
        public DbSet<IEP_PE11_Service> IEP_PE11_Service { get; set; }
        public DbSet<IEP_PE12_DateOfRev> IEP_PE12_DateOfRev { get; set; }
        public DbSet<IEP_PE12_ESY> IEP_PE12_ESY { get; set; }
        public DbSet<IEP_PE12_SupportService> IEP_PE12_SupportService { get; set; }
        public DbSet<IEP_PE2_Team> IEP_PE2_Team { get; set; }
        public DbSet<IEP_PE6_Edu> IEP_PE6_Edu { get; set; }
        public DbSet<IEP_PE6_Goal> IEP_PE6_Goal { get; set; }
        public DbSet<IEP_PE6_GoalsObj> IEP_PE6_GoalsObj { get; set; }
        public DbSet<IEP_PE6_Living> IEP_PE6_Living { get; set; }
        public DbSet<IEPPA1> IEPPA1 { get; set; }
        public DbSet<IEPPA1Extension> IEPPA1Extension { get; set; }
        public DbSet<Insurance> Insurances { get; set; }
        public DbSet<LE_ContentLesson> LE_ContentLesson { get; set; }
        public DbSet<LE_Domain> LE_Domain { get; set; }
        public DbSet<LE_Lesson> LE_Lesson { get; set; }
        public DbSet<LE_LessonDetails> LE_LessonDetails { get; set; }
        public DbSet<LE_Media> LE_Media { get; set; }
        public DbSet<LE_Options> LE_Options { get; set; }
        public DbSet<LE_ReinforcementAssgn> LE_ReinforcementAssgn { get; set; }
        public DbSet<LE_SetStep> LE_SetStep { get; set; }
        public DbSet<LessonPlan> LessonPlans { get; set; }
        public DbSet<LessonPlanGraphRelation> LessonPlanGraphRelations { get; set; }
        public DbSet<LetterEngine> LetterEngines { get; set; }
        public DbSet<LetterEngineItem> LetterEngineItems { get; set; }
        public DbSet<LookUp> LookUps { get; set; }
        public DbSet<LPAttribute> LPAttributes { get; set; }
        public DbSet<LPDoc> LPDocs { get; set; }
        public DbSet<MedicalAndInsurance> MedicalAndInsurances { get; set; }
        public DbSet<Object> Objects { get; set; }
        public DbSet<Parent> Parents { get; set; }
        public DbSet<Placement> Placements { get; set; }
        public DbSet<ProcessChkLstRel> ProcessChkLstRels { get; set; }
        public DbSet<Progress_Report> Progress_Report { get; set; }
        public DbSet<ProgressRpt> ProgressRpts { get; set; }
        public DbSet<ProgressRpt_Doc> ProgressRpt_Doc { get; set; }
        public DbSet<ProgressRpt_Doc1> ProgressRpt_Doc1 { get; set; }
        public DbSet<ProgressRpt_Doc2> ProgressRpt_Doc2 { get; set; }
        public DbSet<ProgressRpt_List> ProgressRpt_List { get; set; }
        public DbSet<ProgressRpt_RTF_M> ProgressRpt_RTF_M { get; set; }
        public DbSet<ProgressRpt_RTF_Q> ProgressRpt_RTF_Q { get; set; }
        public DbSet<Protocol> Protocols { get; set; }
        public DbSet<Protocol_1_Assistive> Protocol_1_Assistive { get; set; }
        public DbSet<Protocol_2_Community> Protocol_2_Community { get; set; }
        public DbSet<Protocol_3_Family> Protocol_3_Family { get; set; }
        public DbSet<Protocol_4_Basic> Protocol_4_Basic { get; set; }
        public DbSet<Protocol_5_Signature> Protocol_5_Signature { get; set; }
        public DbSet<PrvsRecomendation> PrvsRecomendations { get; set; }
        public DbSet<ref_CallLogs> ref_CallLogs { get; set; }
        public DbSet<ref_Checklist> ref_Checklist { get; set; }
        public DbSet<ref_CheckListAssign> ref_CheckListAssign { get; set; }
        public DbSet<ref_ChecklistItemOther> ref_ChecklistItemOther { get; set; }
        public DbSet<ref_ChecklistOther> ref_ChecklistOther { get; set; }
        public DbSet<ref_CheckListUsers> ref_CheckListUsers { get; set; }
        public DbSet<ref_ConsentMeeting> ref_ConsentMeeting { get; set; }
        public DbSet<ref_ContractDetails> ref_ContractDetails { get; set; }
        public DbSet<ref_IntakeAssessment> ref_IntakeAssessment { get; set; }
        public DbSet<ref_LetterTrayAssign> ref_LetterTrayAssign { get; set; }
        public DbSet<ref_LetterTrayValues> ref_LetterTrayValues { get; set; }
        public DbSet<ref_MatchOpening> ref_MatchOpening { get; set; }
        public DbSet<ref_Notes> ref_Notes { get; set; }
        public DbSet<ref_Notification> ref_Notification { get; set; }
        public DbSet<ref_ParentScreening> ref_ParentScreening { get; set; }
        public DbSet<ref_PlacementMeeting> ref_PlacementMeeting { get; set; }
        public DbSet<ref_Queue> ref_Queue { get; set; }
        public DbSet<ref_QueueStatus> ref_QueueStatus { get; set; }
        public DbSet<ref_Recipients> ref_Recipients { get; set; }
        public DbSet<ref_ReviewComments> ref_ReviewComments { get; set; }
        public DbSet<ref_ReviewTeamDecision> ref_ReviewTeamDecision { get; set; }
        public DbSet<ref_TeamAssign> ref_TeamAssign { get; set; }
        public DbSet<ref_TeamReferrals> ref_TeamReferrals { get; set; }
        public DbSet<ref_UserLogs> ref_UserLogs { get; set; }
        public DbSet<ReviewTeam> ReviewTeams { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<RoleGroup> RoleGroups { get; set; }
        public DbSet<RoleGroupPerm> RoleGroupPerms { get; set; }
        public DbSet<School> Schools { get; set; }
        public DbSet<SchoolCal> SchoolCals { get; set; }
        public DbSet<SchoolHoliday> SchoolHolidays { get; set; }
        public DbSet<SchoolsAttended> SchoolsAttendeds { get; set; }
        public DbSet<StdtAcdSheet> StdtAcdSheets { get; set; }
        public DbSet<StdtAggScore> StdtAggScores { get; set; }
        public DbSet<StdtAggScores_Backup> StdtAggScores_Backup { get; set; }
        public DbSet<StdtAggScoreSet> StdtAggScoreSets { get; set; }
        public DbSet<StdtAggScoreSet_Backup> StdtAggScoreSet_Backup { get; set; }
        public DbSet<StdtCheckedIn> StdtCheckedIns { get; set; }
        public DbSet<StdtClass> StdtClasses { get; set; }
        public DbSet<StdtClinicalCoverSheet> StdtClinicalCoverSheets { get; set; }
        public DbSet<StdtDSStat> StdtDSStats { get; set; }
        public DbSet<StdtDSStepStat> StdtDSStepStats { get; set; }
        public DbSet<StdtGoal> StdtGoals { get; set; }
        public DbSet<StdtGoalSvc> StdtGoalSvcs { get; set; }
        public DbSet<StdtGrandRoundCvrsheet> StdtGrandRoundCvrsheets { get; set; }
        public DbSet<StdtIEP> StdtIEPs { get; set; }
        public DbSet<StdtIEP_PE> StdtIEP_PE { get; set; }
        public DbSet<StdtIEP_PE10_GoalsObj> StdtIEP_PE10_GoalsObj { get; set; }
        public DbSet<StdtIEP_PEUpdateStatus> StdtIEP_PEUpdateStatus { get; set; }
        public DbSet<StdtIEPExt1> StdtIEPExt1 { get; set; }
        public DbSet<StdtIEPExt2> StdtIEPExt2 { get; set; }
        public DbSet<StdtIEPExt3> StdtIEPExt3 { get; set; }
        public DbSet<StdtIEPExt4> StdtIEPExt4 { get; set; }
        public DbSet<StdtIEPExt5> StdtIEPExt5 { get; set; }
        public DbSet<stdtIEPUpdateStatu> stdtIEPUpdateStatus { get; set; }
        public DbSet<StdtIntAsmnt> StdtIntAsmnts { get; set; }
        public DbSet<StdtLessonPlan> StdtLessonPlans { get; set; }
        public DbSet<StdtLoadDate> StdtLoadDates { get; set; }
        public DbSet<StdtLPSched> StdtLPScheds { get; set; }
        public DbSet<StdtLPStg> StdtLPStgs { get; set; }
        public DbSet<StdtSessColScore> StdtSessColScores { get; set; }
        public DbSet<StdtSessEvent> StdtSessEvents { get; set; }
        public DbSet<StdtSessionDtl> StdtSessionDtls { get; set; }
        public DbSet<StdtSessionHdr> StdtSessionHdrs { get; set; }
        public DbSet<StdtSessionScore> StdtSessionScores { get; set; }
        public DbSet<StdtSessionStep> StdtSessionSteps { get; set; }
        public DbSet<StdtSessStimuliActivity> StdtSessStimuliActivities { get; set; }
        public DbSet<StdtStatu> StdtStatus { get; set; }
        public DbSet<StudentAddresRel> StudentAddresRels { get; set; }
        public DbSet<StudentContactRelationship> StudentContactRelationships { get; set; }
        public DbSet<StudentOld> StudentOlds { get; set; }
        public DbSet<StudentParentRel> StudentParentRels { get; set; }
        public DbSet<StudentPersonal> StudentPersonals { get; set; }
        public DbSet<StudentPersonalPA> StudentPersonalPAs { get; set; }
        public DbSet<TabDefinition> TabDefinitions { get; set; }
        public DbSet<tblLetterEngine> tblLetterEngines { get; set; }
        public DbSet<TeamMember> TeamMembers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserClass> UserClasses { get; set; }
        public DbSet<UserRoleGroup> UserRoleGroups { get; set; }
        public DbSet<Visitation> Visitations { get; set; }
        public DbSet<Behavior> Behaviors { get; set; }
        public DbSet<DataSheet> DataSheets { get; set; }
        public DbSet<IEP> IEPs { get; set; }
        public DbSet<StdtScoreVw> StdtScoreVws { get; set; }
        public DbSet<Student> Students { get; set; }
    
        public virtual ObjectResult<Referral_Notifications_Result> Referral_Notifications(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Referral_Notifications_Result>("Referral_Notifications", schoolIdParameter);
        }
    
        public virtual ObjectResult<ActiveReferalNdUser_Result> ActiveReferalNdUser(string type, Nullable<int> schoolId, Nullable<int> userId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveReferalNdUser_Result>("ActiveReferalNdUser", typeParameter, schoolIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SelectStudentPersonalDetails_Result> SelectStudentPersonalDetails(Nullable<int> stdId)
        {
            var stdIdParameter = stdId.HasValue ?
                new ObjectParameter("StdId", stdId) :
                new ObjectParameter("StdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStudentPersonalDetails_Result>("SelectStudentPersonalDetails", stdIdParameter);
        }
    
        public virtual ObjectResult<Referral_Dashboard_Result> Referral_Dashboard(Nullable<int> queueId, Nullable<int> schoolId, string sType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("SType", sType) :
                new ObjectParameter("SType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Referral_Dashboard_Result>("Referral_Dashboard", queueIdParameter, schoolIdParameter, sTypeParameter);
        }
    
        public virtual int BehaviorReport_Trendline(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, string behavior, string trendtype, string @event)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var behaviorParameter = behavior != null ?
                new ObjectParameter("Behavior", behavior) :
                new ObjectParameter("Behavior", typeof(string));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BehaviorReport_Trendline", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, behaviorParameter, trendtypeParameter, eventParameter);
        }
    
        public virtual int behaviourPartialAdd(string startTime, string endTime, string queryToExe)
        {
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var queryToExeParameter = queryToExe != null ?
                new ObjectParameter("QueryToExe", queryToExe) :
                new ObjectParameter("QueryToExe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("behaviourPartialAdd", startTimeParameter, endTimeParameter, queryToExeParameter);
        }
    
        public virtual int BiweeklyReport_Trendline(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, string lessonPlanid, string trendtype, string @event)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var lessonPlanidParameter = lessonPlanid != null ?
                new ObjectParameter("LessonPlanid", lessonPlanid) :
                new ObjectParameter("LessonPlanid", typeof(string));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklyReport_Trendline", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, lessonPlanidParameter, trendtypeParameter, eventParameter);
        }
    
        public virtual int BiweeklySessionReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> studentId, string lessonPlan, Nullable<int> schoolId, string @event, string trendType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var lessonPlanParameter = lessonPlan != null ?
                new ObjectParameter("LessonPlan", lessonPlan) :
                new ObjectParameter("LessonPlan", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            var trendTypeParameter = trendType != null ?
                new ObjectParameter("TrendType", trendType) :
                new ObjectParameter("TrendType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklySessionReport", startDateParameter, endDateParameter, studentIdParameter, lessonPlanParameter, schoolIdParameter, eventParameter, trendTypeParameter);
        }
    
        public virtual ObjectResult<ChainedSessionReport_Result> ChainedSessionReport(string lessonPlanName, string studentName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var lessonPlanNameParameter = lessonPlanName != null ?
                new ObjectParameter("LessonPlanName", lessonPlanName) :
                new ObjectParameter("LessonPlanName", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChainedSessionReport_Result>("ChainedSessionReport", lessonPlanNameParameter, studentNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Client_Dashboard_Result> Client_Dashboard(Nullable<int> queueId, Nullable<int> schoolId, string sType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("SType", sType) :
                new ObjectParameter("SType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Client_Dashboard_Result>("Client_Dashboard", queueIdParameter, schoolIdParameter, sTypeParameter);
        }
    
        public virtual ObjectResult<ClientReportProcedure_Result> ClientReportProcedure(string schoolType)
        {
            var schoolTypeParameter = schoolType != null ?
                new ObjectParameter("SchoolType", schoolType) :
                new ObjectParameter("SchoolType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientReportProcedure_Result>("ClientReportProcedure", schoolTypeParameter);
        }
    
        public virtual ObjectResult<string> DateIntervalExist(string startTime, string endTime, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> schoolId, Nullable<int> classId, Nullable<int> numOfTime)
        {
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var numOfTimeParameter = numOfTime.HasValue ?
                new ObjectParameter("NumOfTime", numOfTime) :
                new ObjectParameter("NumOfTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DateIntervalExist", startTimeParameter, endTimeParameter, startDateParameter, endDateParameter, schoolIdParameter, classIdParameter, numOfTimeParameter);
        }
    
        public virtual ObjectResult<EmergencyContacyPersonal_E_Result> EmergencyContacyPersonal_E(Nullable<int> schoolId, Nullable<int> studentId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmergencyContacyPersonal_E_Result>("EmergencyContacyPersonal_E", schoolIdParameter, studentIdParameter);
        }
    
        public virtual int GenerateDates_Hour(Nullable<System.DateTime> start_Date, Nullable<System.DateTime> end_Date)
        {
            var start_DateParameter = start_Date.HasValue ?
                new ObjectParameter("Start_Date", start_Date) :
                new ObjectParameter("Start_Date", typeof(System.DateTime));
    
            var end_DateParameter = end_Date.HasValue ?
                new ObjectParameter("End_Date", end_Date) :
                new ObjectParameter("End_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateDates_Hour", start_DateParameter, end_DateParameter);
        }
    
        public virtual int IOAPercentage_Calculation(Nullable<int> normalSessHdr, Nullable<int> iOASessHdr)
        {
            var normalSessHdrParameter = normalSessHdr.HasValue ?
                new ObjectParameter("NormalSessHdr", normalSessHdr) :
                new ObjectParameter("NormalSessHdr", typeof(int));
    
            var iOASessHdrParameter = iOASessHdr.HasValue ?
                new ObjectParameter("IOASessHdr", iOASessHdr) :
                new ObjectParameter("IOASessHdr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IOAPercentage_Calculation", normalSessHdrParameter, iOASessHdrParameter);
        }
    
        public virtual ObjectResult<ReferralFundingVsNonFunded_Result> ReferralFundingVsNonFunded(string fundtype)
        {
            var fundtypeParameter = fundtype != null ?
                new ObjectParameter("Fundtype", fundtype) :
                new ObjectParameter("Fundtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReferralFundingVsNonFunded_Result>("ReferralFundingVsNonFunded", fundtypeParameter);
        }
    
        public virtual ObjectResult<ReferralReportProcedure_Result> ReferralReportProcedure(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReferralReportProcedure_Result>("ReferralReportProcedure", schoolIDParameter);
        }
    
        public virtual int SessionScore_Calculation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SessionScore_Calculation");
        }
    
        public virtual ObjectResult<sp_copyLessonPlan_Result> sp_copyLessonPlan(Nullable<int> pcopyLessonId, Nullable<int> pIsStEdit, Nullable<int> pIsCCEdit)
        {
            var pcopyLessonIdParameter = pcopyLessonId.HasValue ?
                new ObjectParameter("pcopyLessonId", pcopyLessonId) :
                new ObjectParameter("pcopyLessonId", typeof(int));
    
            var pIsStEditParameter = pIsStEdit.HasValue ?
                new ObjectParameter("pIsStEdit", pIsStEdit) :
                new ObjectParameter("pIsStEdit", typeof(int));
    
            var pIsCCEditParameter = pIsCCEdit.HasValue ?
                new ObjectParameter("pIsCCEdit", pIsCCEdit) :
                new ObjectParameter("pIsCCEdit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_copyLessonPlan_Result>("sp_copyLessonPlan", pcopyLessonIdParameter, pIsStEditParameter, pIsCCEditParameter);
        }
    
        public virtual ObjectResult<sp_copyLessonPlanonRename_Result> sp_copyLessonPlanonRename(Nullable<int> pcopyLessonId, Nullable<int> pIsStEdit, Nullable<int> pIsCCEdit, string pstudentName, string prenameLessonName)
        {
            var pcopyLessonIdParameter = pcopyLessonId.HasValue ?
                new ObjectParameter("pcopyLessonId", pcopyLessonId) :
                new ObjectParameter("pcopyLessonId", typeof(int));
    
            var pIsStEditParameter = pIsStEdit.HasValue ?
                new ObjectParameter("pIsStEdit", pIsStEdit) :
                new ObjectParameter("pIsStEdit", typeof(int));
    
            var pIsCCEditParameter = pIsCCEdit.HasValue ?
                new ObjectParameter("pIsCCEdit", pIsCCEdit) :
                new ObjectParameter("pIsCCEdit", typeof(int));
    
            var pstudentNameParameter = pstudentName != null ?
                new ObjectParameter("pstudentName", pstudentName) :
                new ObjectParameter("pstudentName", typeof(string));
    
            var prenameLessonNameParameter = prenameLessonName != null ?
                new ObjectParameter("prenameLessonName", prenameLessonName) :
                new ObjectParameter("prenameLessonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_copyLessonPlanonRename_Result>("sp_copyLessonPlanonRename", pcopyLessonIdParameter, pIsStEditParameter, pIsCCEditParameter, pstudentNameParameter, prenameLessonNameParameter);
        }
    
        public virtual ObjectResult<string> sp_CreateXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CreateXML");
        }
    
        public virtual int sp_DeleteForNonVT(Nullable<int> pTempHeaderId)
        {
            var pTempHeaderIdParameter = pTempHeaderId.HasValue ?
                new ObjectParameter("pTempHeaderId", pTempHeaderId) :
                new ObjectParameter("pTempHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteForNonVT", pTempHeaderIdParameter);
        }
    
        public virtual int sp_InsertDatasheet(Nullable<int> schoolId, Nullable<int> studentId, Nullable<int> lessonPlanId, Nullable<int> teachingProcId, string templateName, Nullable<int> nmbrOfTrials, string chainType, Nullable<int> promptTypeID, Nullable<int> statusID, string isVisualTool, string createdBy, string prompt1, string prompt2, string prompt3, string set1, string set2, string set3, string step1, string step2, string step3, string measure1Name, string measure1Type, string measure1CorrectAnswer, Nullable<bool> mistrial1, string measure2Name, string measure2Type, string measure2CorrectAnswer, Nullable<bool> mistrial2, Nullable<int> goalId, Nullable<int> asmtYearId, Nullable<bool> incIEP, Nullable<int> lessonStatID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var lessonPlanIdParameter = lessonPlanId.HasValue ?
                new ObjectParameter("LessonPlanId", lessonPlanId) :
                new ObjectParameter("LessonPlanId", typeof(int));
    
            var teachingProcIdParameter = teachingProcId.HasValue ?
                new ObjectParameter("TeachingProcId", teachingProcId) :
                new ObjectParameter("TeachingProcId", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("TemplateName", templateName) :
                new ObjectParameter("TemplateName", typeof(string));
    
            var nmbrOfTrialsParameter = nmbrOfTrials.HasValue ?
                new ObjectParameter("NmbrOfTrials", nmbrOfTrials) :
                new ObjectParameter("NmbrOfTrials", typeof(int));
    
            var chainTypeParameter = chainType != null ?
                new ObjectParameter("ChainType", chainType) :
                new ObjectParameter("ChainType", typeof(string));
    
            var promptTypeIDParameter = promptTypeID.HasValue ?
                new ObjectParameter("PromptTypeID", promptTypeID) :
                new ObjectParameter("PromptTypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var isVisualToolParameter = isVisualTool != null ?
                new ObjectParameter("IsVisualTool", isVisualTool) :
                new ObjectParameter("IsVisualTool", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var prompt1Parameter = prompt1 != null ?
                new ObjectParameter("Prompt1", prompt1) :
                new ObjectParameter("Prompt1", typeof(string));
    
            var prompt2Parameter = prompt2 != null ?
                new ObjectParameter("Prompt2", prompt2) :
                new ObjectParameter("Prompt2", typeof(string));
    
            var prompt3Parameter = prompt3 != null ?
                new ObjectParameter("Prompt3", prompt3) :
                new ObjectParameter("Prompt3", typeof(string));
    
            var set1Parameter = set1 != null ?
                new ObjectParameter("Set1", set1) :
                new ObjectParameter("Set1", typeof(string));
    
            var set2Parameter = set2 != null ?
                new ObjectParameter("Set2", set2) :
                new ObjectParameter("Set2", typeof(string));
    
            var set3Parameter = set3 != null ?
                new ObjectParameter("Set3", set3) :
                new ObjectParameter("Set3", typeof(string));
    
            var step1Parameter = step1 != null ?
                new ObjectParameter("Step1", step1) :
                new ObjectParameter("Step1", typeof(string));
    
            var step2Parameter = step2 != null ?
                new ObjectParameter("Step2", step2) :
                new ObjectParameter("Step2", typeof(string));
    
            var step3Parameter = step3 != null ?
                new ObjectParameter("Step3", step3) :
                new ObjectParameter("Step3", typeof(string));
    
            var measure1NameParameter = measure1Name != null ?
                new ObjectParameter("Measure1Name", measure1Name) :
                new ObjectParameter("Measure1Name", typeof(string));
    
            var measure1TypeParameter = measure1Type != null ?
                new ObjectParameter("Measure1Type", measure1Type) :
                new ObjectParameter("Measure1Type", typeof(string));
    
            var measure1CorrectAnswerParameter = measure1CorrectAnswer != null ?
                new ObjectParameter("Measure1CorrectAnswer", measure1CorrectAnswer) :
                new ObjectParameter("Measure1CorrectAnswer", typeof(string));
    
            var mistrial1Parameter = mistrial1.HasValue ?
                new ObjectParameter("mistrial1", mistrial1) :
                new ObjectParameter("mistrial1", typeof(bool));
    
            var measure2NameParameter = measure2Name != null ?
                new ObjectParameter("Measure2Name", measure2Name) :
                new ObjectParameter("Measure2Name", typeof(string));
    
            var measure2TypeParameter = measure2Type != null ?
                new ObjectParameter("Measure2Type", measure2Type) :
                new ObjectParameter("Measure2Type", typeof(string));
    
            var measure2CorrectAnswerParameter = measure2CorrectAnswer != null ?
                new ObjectParameter("Measure2CorrectAnswer", measure2CorrectAnswer) :
                new ObjectParameter("Measure2CorrectAnswer", typeof(string));
    
            var mistrial2Parameter = mistrial2.HasValue ?
                new ObjectParameter("mistrial2", mistrial2) :
                new ObjectParameter("mistrial2", typeof(bool));
    
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            var asmtYearIdParameter = asmtYearId.HasValue ?
                new ObjectParameter("AsmtYearId", asmtYearId) :
                new ObjectParameter("AsmtYearId", typeof(int));
    
            var incIEPParameter = incIEP.HasValue ?
                new ObjectParameter("IncIEP", incIEP) :
                new ObjectParameter("IncIEP", typeof(bool));
    
            var lessonStatIDParameter = lessonStatID.HasValue ?
                new ObjectParameter("LessonStatID", lessonStatID) :
                new ObjectParameter("LessonStatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDatasheet", schoolIdParameter, studentIdParameter, lessonPlanIdParameter, teachingProcIdParameter, templateNameParameter, nmbrOfTrialsParameter, chainTypeParameter, promptTypeIDParameter, statusIDParameter, isVisualToolParameter, createdByParameter, prompt1Parameter, prompt2Parameter, prompt3Parameter, set1Parameter, set2Parameter, set3Parameter, step1Parameter, step2Parameter, step3Parameter, measure1NameParameter, measure1TypeParameter, measure1CorrectAnswerParameter, mistrial1Parameter, measure2NameParameter, measure2TypeParameter, measure2CorrectAnswerParameter, mistrial2Parameter, goalIdParameter, asmtYearIdParameter, incIEPParameter, lessonStatIDParameter);
        }
    
        public virtual int sp_InsertLesson(string lessonName, string description, string keyword, string domain, string category, string discreate, Nullable<int> setNumber, Nullable<int> stepNumber)
        {
            var lessonNameParameter = lessonName != null ?
                new ObjectParameter("lessonName", lessonName) :
                new ObjectParameter("lessonName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var domainParameter = domain != null ?
                new ObjectParameter("domain", domain) :
                new ObjectParameter("domain", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var discreateParameter = discreate != null ?
                new ObjectParameter("discreate", discreate) :
                new ObjectParameter("discreate", typeof(string));
    
            var setNumberParameter = setNumber.HasValue ?
                new ObjectParameter("setNumber", setNumber) :
                new ObjectParameter("setNumber", typeof(int));
    
            var stepNumberParameter = stepNumber.HasValue ?
                new ObjectParameter("stepNumber", stepNumber) :
                new ObjectParameter("stepNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertLesson", lessonNameParameter, descriptionParameter, keywordParameter, domainParameter, categoryParameter, discreateParameter, setNumberParameter, stepNumberParameter);
        }
    
        public virtual int sp_InsertSetStepForVTool(Nullable<int> pTempHeadrId, Nullable<int> pVTLessonId, Nullable<int> pcreatedBy, Nullable<int> pschoolId)
        {
            var pTempHeadrIdParameter = pTempHeadrId.HasValue ?
                new ObjectParameter("pTempHeadrId", pTempHeadrId) :
                new ObjectParameter("pTempHeadrId", typeof(int));
    
            var pVTLessonIdParameter = pVTLessonId.HasValue ?
                new ObjectParameter("pVTLessonId", pVTLessonId) :
                new ObjectParameter("pVTLessonId", typeof(int));
    
            var pcreatedByParameter = pcreatedBy.HasValue ?
                new ObjectParameter("pcreatedBy", pcreatedBy) :
                new ObjectParameter("pcreatedBy", typeof(int));
    
            var pschoolIdParameter = pschoolId.HasValue ?
                new ObjectParameter("pschoolId", pschoolId) :
                new ObjectParameter("pschoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSetStepForVTool", pTempHeadrIdParameter, pVTLessonIdParameter, pcreatedByParameter, pschoolIdParameter);
        }
    
        public virtual int sp_InsrtSeStepOnSubmit(Nullable<int> pTempHeadrId, Nullable<int> pVTLessonId, Nullable<int> pcreatedBy, Nullable<int> pschoolId)
        {
            var pTempHeadrIdParameter = pTempHeadrId.HasValue ?
                new ObjectParameter("pTempHeadrId", pTempHeadrId) :
                new ObjectParameter("pTempHeadrId", typeof(int));
    
            var pVTLessonIdParameter = pVTLessonId.HasValue ?
                new ObjectParameter("pVTLessonId", pVTLessonId) :
                new ObjectParameter("pVTLessonId", typeof(int));
    
            var pcreatedByParameter = pcreatedBy.HasValue ?
                new ObjectParameter("pcreatedBy", pcreatedBy) :
                new ObjectParameter("pcreatedBy", typeof(int));
    
            var pschoolIdParameter = pschoolId.HasValue ?
                new ObjectParameter("pschoolId", pschoolId) :
                new ObjectParameter("pschoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsrtSeStepOnSubmit", pTempHeadrIdParameter, pVTLessonIdParameter, pcreatedByParameter, pschoolIdParameter);
        }
    
        public virtual ObjectResult<StudentBasicDetailsNE_Result> StudentBasicDetailsNE(Nullable<int> schoolId, Nullable<int> studentId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentBasicDetailsNE_Result>("StudentBasicDetailsNE", schoolIdParameter, studentIdParameter);
        }
    
        public virtual ObjectResult<StudentMoreDetailsNE_Result> StudentMoreDetailsNE(Nullable<int> schoolId, Nullable<int> studentId, string type)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentMoreDetailsNE_Result>("StudentMoreDetailsNE", schoolIdParameter, studentIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<StudentMoreDetailsPA_Result> StudentMoreDetailsPA(Nullable<int> schoolId, Nullable<int> studentId, string type)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentMoreDetailsPA_Result>("StudentMoreDetailsPA", schoolIdParameter, studentIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> TemplateStudentLevel_Create(Nullable<long> schoolId, Nullable<long> studentId, Nullable<long> lessonPlanId, string lessonName, Nullable<long> createdBy)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(long));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(long));
    
            var lessonPlanIdParameter = lessonPlanId.HasValue ?
                new ObjectParameter("LessonPlanId", lessonPlanId) :
                new ObjectParameter("LessonPlanId", typeof(long));
    
            var lessonNameParameter = lessonName != null ?
                new ObjectParameter("LessonName", lessonName) :
                new ObjectParameter("LessonName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TemplateStudentLevel_Create", schoolIdParameter, studentIdParameter, lessonPlanIdParameter, lessonNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> ValidateAsmnt(Nullable<int> schoolId, string asmntName)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var asmntNameParameter = asmntName != null ?
                new ObjectParameter("AsmntName", asmntName) :
                new ObjectParameter("AsmntName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateAsmnt", schoolIdParameter, asmntNameParameter);
        }
    
        public virtual int Referral_Dashboard1(Nullable<int> queueId, Nullable<int> schoolId, string sType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("SType", sType) :
                new ObjectParameter("SType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Referral_Dashboard1", queueIdParameter, schoolIdParameter, sTypeParameter);
        }
    
        public virtual ObjectResult<SearchAllTables_Result> SearchAllTables(string searchStr)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAllTables_Result>("SearchAllTables", searchStrParameter);
        }
    
        public virtual int BehaviorReport_Trendline_backup(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, string behavior, string trendtype, string @event)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var behaviorParameter = behavior != null ?
                new ObjectParameter("Behavior", behavior) :
                new ObjectParameter("Behavior", typeof(string));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BehaviorReport_Trendline_backup", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, behaviorParameter, trendtypeParameter, eventParameter);
        }
    
        public virtual int BiweeklyReport_Trendline_Backup(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, string lessonPlanid, string trendtype, string @event)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var lessonPlanidParameter = lessonPlanid != null ?
                new ObjectParameter("LessonPlanid", lessonPlanid) :
                new ObjectParameter("LessonPlanid", typeof(string));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklyReport_Trendline_Backup", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, lessonPlanidParameter, trendtypeParameter, eventParameter);
        }
    
        public virtual int BiweeklyReport_Trendline_Set(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, Nullable<int> lessonPlanid, string trendtype, string @event, string setIds, string dsTempSetColCalcIds, string isMaintanance)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var lessonPlanidParameter = lessonPlanid.HasValue ?
                new ObjectParameter("LessonPlanid", lessonPlanid) :
                new ObjectParameter("LessonPlanid", typeof(int));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            var setIdsParameter = setIds != null ?
                new ObjectParameter("SetIds", setIds) :
                new ObjectParameter("SetIds", typeof(string));
    
            var dsTempSetColCalcIdsParameter = dsTempSetColCalcIds != null ?
                new ObjectParameter("DsTempSetColCalcIds", dsTempSetColCalcIds) :
                new ObjectParameter("DsTempSetColCalcIds", typeof(string));
    
            var isMaintananceParameter = isMaintanance != null ?
                new ObjectParameter("IsMaintanance", isMaintanance) :
                new ObjectParameter("IsMaintanance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklyReport_Trendline_Set", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, lessonPlanidParameter, trendtypeParameter, eventParameter, setIdsParameter, dsTempSetColCalcIdsParameter, isMaintananceParameter);
        }
    
        public virtual int BiweeklyReport_Trendline_Set_Backup(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId, Nullable<int> lessonPlanid, string trendtype, string @event, string setIds, string dsTempSetColCalcIds, string isMaintanance)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var lessonPlanidParameter = lessonPlanid.HasValue ?
                new ObjectParameter("LessonPlanid", lessonPlanid) :
                new ObjectParameter("LessonPlanid", typeof(int));
    
            var trendtypeParameter = trendtype != null ?
                new ObjectParameter("Trendtype", trendtype) :
                new ObjectParameter("Trendtype", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            var setIdsParameter = setIds != null ?
                new ObjectParameter("SetIds", setIds) :
                new ObjectParameter("SetIds", typeof(string));
    
            var dsTempSetColCalcIdsParameter = dsTempSetColCalcIds != null ?
                new ObjectParameter("DsTempSetColCalcIds", dsTempSetColCalcIds) :
                new ObjectParameter("DsTempSetColCalcIds", typeof(string));
    
            var isMaintananceParameter = isMaintanance != null ?
                new ObjectParameter("IsMaintanance", isMaintanance) :
                new ObjectParameter("IsMaintanance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklyReport_Trendline_Set_Backup", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter, lessonPlanidParameter, trendtypeParameter, eventParameter, setIdsParameter, dsTempSetColCalcIdsParameter, isMaintananceParameter);
        }
    
        public virtual int BiweeklySessionReport_Backup(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> studentId, string lessonPlan, Nullable<int> schoolId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var lessonPlanParameter = lessonPlan != null ?
                new ObjectParameter("LessonPlan", lessonPlan) :
                new ObjectParameter("LessonPlan", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BiweeklySessionReport_Backup", startDateParameter, endDateParameter, studentIdParameter, lessonPlanParameter, schoolIdParameter);
        }
    
        public virtual int Coversheet_Behavior(Nullable<System.DateTime> startDate, Nullable<System.DateTime> eNDDate, Nullable<int> studentid, Nullable<int> schoolId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var eNDDateParameter = eNDDate.HasValue ?
                new ObjectParameter("ENDDate", eNDDate) :
                new ObjectParameter("ENDDate", typeof(System.DateTime));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Coversheet_Behavior", startDateParameter, eNDDateParameter, studentidParameter, schoolIdParameter);
        }
    
        public virtual int Delete_Reorder_setStep(Nullable<int> id, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Reorder_setStep", idParameter, typeParameter);
        }
    
        public virtual int Deletesession()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletesession");
        }
    
        public virtual ObjectResult<GetEvents_Result> GetEvents(Nullable<int> studentId, Nullable<int> schoolId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEvents_Result>("GetEvents", studentIdParameter, schoolIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Goal_Lessons_Behavior_Result> Goal_Lessons_Behavior(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> studentId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Goal_Lessons_Behavior_Result>("Goal_Lessons_Behavior", startDateParameter, endDateParameter, studentIdParameter);
        }
    
        public virtual int IOAPercentage_Calculation_New(Nullable<int> normalSessHdr)
        {
            var normalSessHdrParameter = normalSessHdr.HasValue ?
                new ObjectParameter("NormalSessHdr", normalSessHdr) :
                new ObjectParameter("NormalSessHdr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IOAPercentage_Calculation_New", normalSessHdrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Referral_NotificationsS(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Referral_NotificationsS", schoolIdParameter);
        }
    
        public virtual int SessionScore_Calculation_Backup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SessionScore_Calculation_Backup");
        }
    
        public virtual int SessionScore_Calculation_Set()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SessionScore_Calculation_Set");
        }
    
        public virtual int SessionScore_Calculation_Set_Backup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SessionScore_Calculation_Set_Backup");
        }
    
        public virtual int Update_StudentStatus_Automatically(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_StudentStatus_Automatically", studentIdParameter);
        }
    
        public virtual int UpdateLessonOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLessonOrder");
        }
    }
}
